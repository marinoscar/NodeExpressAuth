// Generated by CoffeeScript 1.9.1
(function() {
  var GitHubStrategy, UserStore, localStrategy;

  localStrategy = require('passport-local').Strategy;

  GitHubStrategy = require('passport-github').Strategy;

  UserStore = require('../services/userStore');

  module.exports = function(passport) {
    passport.use('local', new localStrategy(function(username, password, done) {
      var store, user;
      store = new UserStore();
      user = store.find(username);
      if (user === null) {
        return done(null, false, {
          message: 'Invalid user'
        });
      }
      if (user.password !== password) {
        return done(null, false, {
          message: 'Invalid password'
        });
      }
      return done(null, user);
    }));
    passport.use('github', new GitHubStrategy({
      clientID: '32d29cd28dc740123247',
      clientSecret: 'c1597b8d29b53ce352d88decae82320629ccdf59',
      callbackURL: 'http://localhost:3000/auth/github/callback'
    }, function(accessToken, refreshToken, profile, done) {
      var user, userStore;
      console.log("access token: " + accessToken);
      userStore = new UserStore();
      user = userStore.createInstance();
      user.profile = profile;
      user.data = JSON.parse(profile._raw);
      return done(null, user);
    }));
    passport.serializeUser(function(user, done) {
      console.log('Serializing ' + user.providerKey);
      return done(null, user.providerKey);
    });
    return passport.deserializeUser(function(obj, done) {
      var store, user;
      console.log('Deserializing ' + obj);
      store = new UserStore();
      user = store.findByKey(obj);
      return done(null, user);
    });
  };

}).call(this);

//# sourceMappingURL=passport.js.map
